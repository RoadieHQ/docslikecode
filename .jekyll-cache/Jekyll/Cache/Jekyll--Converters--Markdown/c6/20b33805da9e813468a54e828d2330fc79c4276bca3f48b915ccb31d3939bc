I"ŸX<p>Learning GitHub or any source control system backed by <code class="language-plaintext highlighter-rouge">git</code> for documentation sites takes some time and practice. This set of lessons uses the Terminal rather than the desktop application or the web site UI, though both are valid ways to do a Git workflow.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>A GitHub, GitLab, or other Git online account.</li>
  <li>A Git repository already created online in one of those services (GitHub, GitLab, or similar).</li>
</ul>

<p>These instructions are written for both Windows and MacOS or Linux-based environment.</p>

<h2 id="create-a-github-account-or-gitlab-account">Create a GitHub account or GitLab account</h2>

<p>You can learn how to sign up for a GitHub account and pricing plans on <a href="https://help.github.com/articles/signing-up-for-a-new-github-account/">help.github.com</a>.</p>

<p>For GitLab registration and pricing, refer to the <a href="https://about.gitlab.com/pricing/">GitLab pricing page</a>.</p>

<p>You can do all these docs-as-code tutorials with a free GitHub or GitLab account. I recommend using SSH keys rather than entering your password for each <code class="language-plaintext highlighter-rouge">git</code> command that requires authentication.</p>
<ul>
  <li>Read about <a href="https://help.github.com/articles/connecting-to-github-with-ssh/">Connecting to GitHub with SSH</a> in the GitHub user documentation.</li>
  <li>Get more information about <a href="https://gitlab.com/help/ssh/README.md">GitLab and SSH keys</a> in the GitLab user documentation.</li>
</ul>

<h2 id="learn-basic-terminal-and-git-bash-commands">Learn basic Terminal and Git Bash commands</h2>

<p>One great aspect of these developer workflows and tools means you have a lot of freedom to choose how you work. That said, for this choose-your-adventure series, we tend to think you already have Terminal commands memorized or you understand them. Whether you‚Äôre on a Mac, Linux, or Windows, these come in handy.</p>

<p>Knowing the basics should help. Here‚Äôs a short list:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ls</code> - List directory contents, <code class="language-plaintext highlighter-rouge">dir</code> is the equivalent in Windows.</li>
  <li><code class="language-plaintext highlighter-rouge">pwd</code> - Show working directory name, <code class="language-plaintext highlighter-rouge">cd ,</code> is the equivalent command in Windows.</li>
  <li><code class="language-plaintext highlighter-rouge">cd path/to/directory/</code> - Change to another directory. In Git Bash on Windows you can use <code class="language-plaintext highlighter-rouge">cd  /c/project/</code>. If you need to change to a directory with spaces in the name, you must surround the path with double quote marks, such as <code class="language-plaintext highlighter-rouge">cd "C:\My Project\"</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">cd ..</code> - Go up one directory.</li>
  <li><code class="language-plaintext highlighter-rouge">git status</code> - Shows the changes pending or shows if changes are already committed.</li>
  <li><code class="language-plaintext highlighter-rouge">git branch</code> - Lists all the local branches and indicates the current branch with an asterisk (<code class="language-plaintext highlighter-rouge">*</code>).</li>
  <li><code class="language-plaintext highlighter-rouge">git config -l</code> - Lists all the configuration for the local repo when it contains a Git repository.</li>
  <li><code class="language-plaintext highlighter-rouge">git init</code> - Sets up all the files for Git to be able to track a project as a repository. Init stands for initialize.</li>
</ul>

<h2 id="more-resources-for-learning-git-and-github">More resources for learning Git and GitHub</h2>

<p>As with any complex system, you want to practice using Git commands to learn the system well and also how to troubleshoot. Here‚Äôs a great list of resources for both hands-on practice and reference.</p>

<ul>
  <li><a href="https://lab.github.com/">GitHub Learning Lab</a> ‚ÄúGet the skills you need without leaving GitHub. GitHub Learning Lab takes you through a series of fun and practical projects, sharing helpful feedback along the way.‚Äù</li>
  <li><a href="https://guides.github.com/">GitHub Guides</a> - Guided tutorials about 3-10 minutes in duration.</li>
  <li><a href="https://help.github.com/articles/git-and-github-learning-resources/">Git and GitHub learning resources</a></li>
  <li><a href="https://www.theserverside.com/tutorial/Five-basic-Git-commands-every-beginner-needs-to-know">Five basic Git commands every beginner needs to know</a></li>
  <li><a href="https://help.github.com/articles/troubleshooting-connectivity-problems/">Troubleshooting connectivity problems</a></li>
</ul>

<h2 id="learn-github-vocabulary">Learn GitHub vocabulary</h2>

<p>The terms sound confusing at first. Here‚Äôs a list of vocabulary words to help you get through the initial learning curve.</p>

<table>
  <thead>
    <tr>
      <th>Term</th>
      <th>Definition</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>branch</td>
      <td>A parallel version of a repo within the repo that does not affect the primary or master branch. You can work freely in a branch without affecting the live version. After you make changes, you can merge your branch into the master branch to publish your changes.</td>
    </tr>
    <tr>
      <td>clone</td>
      <td>A copy of a repo that lives on your computer instead of on a website‚Äôs server.</td>
    </tr>
    <tr>
      <td>commit</td>
      <td>A point-in-time snapshot of a repo. Commits let you see the differences between changes. A commit is an individual change to a file or set of files. Every time that you save a file or a set of files, Git creates a unique ID, also known as the SHA or hash, that tracks the changes. Commits usually contain a commit message, which is a brief description of what changes were made.</td>
    </tr>
    <tr>
      <td>downstream</td>
      <td>A label for a remote URL, where a remote represents a place where code is stored. A downstream remote indicates an opposite of an upstream, or original, repo.</td>
    </tr>
    <tr>
      <td>fork (noun)</td>
      <td>A copy of the repo that is entirely yours in your namespace. A fork gives you a way to both contribute openly and get credit for your contributions.</td>
    </tr>
    <tr>
      <td>fork (verb)</td>
      <td>The act of making a forked copy of the repo.</td>
    </tr>
    <tr>
      <td>issue</td>
      <td>A way to submit a suggested improvement, defect, task, or feature request to a repo. In a public repo, anyone can create an issue. Each issue contains its own discussion forum. You can label an issue and assign it to a user.</td>
    </tr>
    <tr>
      <td>organization</td>
      <td>A collection of group-owned repositories.</td>
    </tr>
    <tr>
      <td>pull request</td>
      <td>A method of submitting edits that compares your changes with the original. Teams can view the comparison to decide whether they want to accept the changes.</td>
    </tr>
    <tr>
      <td>push</td>
      <td>Move your local committed changes to a remote location, such as GitHub.com, so that other people can access them.</td>
    </tr>
    <tr>
      <td>remote</td>
      <td>A version of your project that is hosted on the Internet or on a network. The remote is usually connected to local clones so that you can sync changes.</td>
    </tr>
    <tr>
      <td>repository or repo</td>
      <td>A collection of stored code or docs.</td>
    </tr>
    <tr>
      <td>review</td>
      <td>Perform a line-by-line comparison of a change and comment on improvements or suggest changes, much like a copy editor does for a newspaper article.</td>
    </tr>
    <tr>
      <td>upstream</td>
      <td>The primary label for the remote URL indicating the original repo where changes are merged. The branch, or fork, where you do your work is called downstream.</td>
    </tr>
  </tbody>
</table>

<p>You want to get a good sense of these terms, because when you‚Äôre new to Git, it‚Äôs easy to confuse named directories, such as a cloned fork that is named after the original repo, and Git branches.</p>

<p>You can instruct Git to base your branch on the <code class="language-plaintext highlighter-rouge">master</code> branch in <code class="language-plaintext highlighter-rouge">upstream</code>, <code class="language-plaintext highlighter-rouge">origin</code>, or another <code class="language-plaintext highlighter-rouge">named</code> remote. For example, this command bases a new branch on the <code class="language-plaintext highlighter-rouge">master</code> branch in the <code class="language-plaintext highlighter-rouge">upstream</code> remote:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout upstream/master -b my-branch
</code></pre></div></div>

<h2 id="set-up-prompts-terminal-on-macos-or-linux">Set up prompts (Terminal on MacOS or Linux)</h2>

<p>While you‚Äôre working in your Terminal window, it‚Äôs great to always know which branch you‚Äôre on by modifying your prompt to show the current <code class="language-plaintext highlighter-rouge">git</code> branch. To do so, put this snippet of code in your <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Git branch in prompt.
parse_git_branch() {
    git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
#export PS1="$ "
export PS1="\u\ \W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ "
</code></pre></div></div>

<p>As an example, with this code in my <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> file, my prompt looks like this while I‚Äôm working in a branch named <code class="language-plaintext highlighter-rouge">initial-content</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>agentle\ choose-adventure-workshop (initial-content) $
</code></pre></div></div>

<h2 id="set-up-prompts-git-bash-on-windows">Set up prompts (Git Bash on Windows)</h2>

<p>Git Bash on Windows displays your current branch on the prompt for you.</p>

<p>One concept to remember here is that Git Bash uses Linux-like commands but the directory listings use forward slash (<code class="language-plaintext highlighter-rouge">/</code>) instead of back slash (<code class="language-plaintext highlighter-rouge">\</code>). You can change directories with commands like <code class="language-plaintext highlighter-rouge">cd  /c/project/</code> where <code class="language-plaintext highlighter-rouge">/c/</code> represents your <code class="language-plaintext highlighter-rouge">C:/</code> drive on Windows.</p>

<h2 id="set-up-your-github-account-for-ssh-access">Set up your GitHub account for SSH access</h2>

<p>To avoid entering your password every time you perform <code class="language-plaintext highlighter-rouge">git clone</code> or <code class="language-plaintext highlighter-rouge">git push</code> commands (it does get tedious), then set up an SSH key for your credentials on GitHub, and then always use the SSH reference rather than the HTTPS reference when you do a <code class="language-plaintext highlighter-rouge">git clone</code> command. You set up references with an SSH key as your identifier, and then you do not need to enter a password from the command line to authenticate to the GitHub site. The GitHub instructions for <a href="https://help.github.com/articles/connecting-to-github-with-ssh/">Connecting to GitHub with SSH</a> work great for this setup, and I highly recommend it. The GitLab instructions in <a href="https://gitlab.com/help/ssh/README.md">GitLab and SSH keys</a> also have a complete walkthrough.</p>

<h2 id="clone-an-existing-repository-on-github">Clone an existing repository on GitHub</h2>

<p>This section goes through the workflow and tips for working with an existing GitHub repository. Let‚Äôs say you join a new team and they use GitHub for their documentation. Where do you start? This article should give you guidance, tips, and scenarios.</p>

<p>Let‚Äôs say it is a stand-alone repository only for docs. In other situations, perhaps the repository has a <code class="language-plaintext highlighter-rouge">/docs</code> subdirectory. You can use these instructions in that situation as well.</p>

<h3 id="prerequisite-make-sure-that-you-have-access-to-the-repository">Prerequisite: make sure that you have access to the repository</h3>

<p>If you go to the URL given to you in a browser and get a 404 page, it‚Äôs possible you‚Äôre not already logged into GitHub. Log in and visit the link again.</p>

<p>If you get a 404 page after logging in, then you need to be added as a collaborator to the repository. Ask an admin for the repo or organization to add you as a collaborator so you can access the repository.</p>

<h3 id="get-a-copy-of-an-existing-git-repository">Get a copy of an existing Git repository</h3>

<ol>
  <li>
    <p>Open a web browser and go to the URL for an existing Git repository. For example:</p>

    <ul>
      <li><strong>GitHub</strong>: https://github.com/justwriteclick/probable-winner</li>
      <li><strong>GitLab</strong>: https://gitlab.com/gitlab-com/www-gitlab-com</li>
    </ul>
  </li>
  <li>
    <p>Click the button with a ‚ÄúClone‚Äù label. Examples:</p>

    <p><strong>GitHub</strong>
 <img alt="Clone or download button" src="/images/github-clone.png" width="50%" /></p>

    <p><strong>GitLab</strong>
 <img alt="Clone button" src="/images/gitlab-clone.png" width="40%" /></p>
  </li>
  <li>Choose the HTTPS option if you have not set up an SSH key. Choose the SSH option if you have set up an SSH key.
Copy the reference to use in the <code class="language-plaintext highlighter-rouge">git clone</code> command. Examples:
    <ul>
      <li><strong>GitHub</strong>:
HTTPS: https://github.com/justwriteclick/probable-winner.git
SSH: git@github.com:justwriteclick/probable-winner.git</li>
      <li><strong>GitLab</strong>:
HTTPS: https://gitlab.com/gitlab-com/www-gitlab-com.git
SSH: git@gitlab.com:gitlab-com/www-gitlab-com.git</li>
    </ul>
  </li>
  <li>Open a Terminal window.</li>
  <li>Change directories to the place where you want to store repositories, such as <code class="language-plaintext highlighter-rouge">~/src</code>.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd ~/src/
</code></pre></div>    </div>
  </li>
  <li>Clone the repository. For this example, you can clone the GitLab source for the about.gitlab.com site. This one takes a while to download but you get a percentage progress reported on the command line:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone https://gitlab.com/gitlab-com/www-gitlab-com.git
</code></pre></div>    </div>
    <blockquote>
      <p>Note: You are prompted for a password if the repository is private. Both of the examples above are public repositories.</p>
    </blockquote>
  </li>
  <li>To view the files, change directories:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd www-gitlab-com/
</code></pre></div>    </div>
  </li>
  <li>List what is in the directory to see the contents:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ls
</code></pre></div>    </div>
  </li>
  <li>Show which branch you‚Äôre on:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git branch
</code></pre></div>    </div>

    <p>Output:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* master
</code></pre></div>    </div>
  </li>
</ol>

<p>Now you have a local copy of the content and can do more steps in <a href="https://docslikecode.com/learn/04-add-content-workflow/">Working with content in GitHub repositories</a>. Hopefully you have a good starting point for working with docs repositories.</p>

<h2 id="create-a-new-repository-on-github">Create a new repository on GitHub</h2>

<p>Before you get too far writing content for a new site, get the directory set up for version control in a Git repo, and make some incremental commits.</p>

<ol>
  <li>Go to https://github.com and log in.</li>
  <li>In your browser, create a new repository in your user space or organization.</li>
  <li>In the root directory, create a quick <code class="language-plaintext highlighter-rouge">README</code> file that contains only a header. For example:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "# do-docs-as-code" &gt;&gt; README
</code></pre></div>    </div>
  </li>
  <li>In the root directory, initialize the Git repo.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>git init
</code></pre></div>    </div>
  </li>
  <li>Next, add all the files you want to have in the repo, as indicated with the period <code class="language-plaintext highlighter-rouge">.</code>.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>git add <span class="nb">.</span>
</code></pre></div>    </div>
  </li>
  <li>Create a commit, or a point in time for the state of the current files in the directory.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>git commit <span class="nt">-a</span> <span class="nt">-m</span> <span class="s2">"Adds initial docs-as-code project"</span>
</code></pre></div>    </div>
  </li>
  <li>In a browser window, go to the newly create repository and copy the SSH or HTTPS reference for the repo, such as: <code class="language-plaintext highlighter-rouge">git@github.com:annegentle/do-docs-as-code.git</code>.
   <img alt="Clone or download button" src="/images/github-clone.png" width="50%" /></li>
  <li>In the Terminal window, type git commands to add a ‚Äúremote‚Äù named ‚Äúorigin‚Äù and then paste in the SSH or HTTPS reference, such as <code class="language-plaintext highlighter-rouge">git@github.com:annegentle/do-docs-as-code.git</code>.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>git remote add origin &lt;<span class="nb">paste </span>the reference&gt;
</code></pre></div>    </div>
  </li>
  <li>In the Terminal window, set the newly added remote as the upstream branch and push the initial commit to this new remote named origin.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git push --set-upstream origin master
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="ignoring-operating-system-files-or-generated-files">Ignoring operating system files or generated files</h2>

<p>In GitHub repos, you can place a <code class="language-plaintext highlighter-rouge">.gitignore</code> file that contains the file extensions or folder names that you want to keep out of source control. When a file extension or folder is in the <code class="language-plaintext highlighter-rouge">.gitignore</code> file, even when you use the <code class="language-plaintext highlighter-rouge">git add .</code> command, those files and folders are not added to the commit.</p>

<p>This exclusion is useful so that you do not have a lot of difficult merges on output HTML files or operating system tracking files.</p>

<p>For Sphinx, you want to ignore these files and folders to avoid merge conflicts:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>build
.DS_Store
</code></pre></div></div>

<p>For Jekyll, you want to ignore these files and folders:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_site
.DS_Store
</code></pre></div></div>

<p>For Hugo, you want to ignore these files and folders. The <code class="language-plaintext highlighter-rouge">static</code> folder could be named <code class="language-plaintext highlighter-rouge">public</code>, depending on your configuration</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static
.DS_Store
</code></pre></div></div>

<h2 id="ignoring-operating-system-files-or-generated-files-1">Ignoring operating system files or generated files</h2>

<p>In GitHub repos, you can place a <code class="language-plaintext highlighter-rouge">.gitignore</code> file that contains the file extensions or folder names that you want to keep out of source control. When a file extension or folder is in the <code class="language-plaintext highlighter-rouge">.gitignore</code> file, even when you use the <code class="language-plaintext highlighter-rouge">git add .</code> command, those files and folders are not added to the commit.</p>

<p>This exclusion is useful so that you do not have a lot of difficult merges on output HTML files or operating system tracking files.</p>

<p>For Sphinx, you want to ignore these files and folders to avoid merge conflicts:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>build
.DS_Store
</code></pre></div></div>

<p>For Jekyll, you want to ignore these files and folders:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_site
.DS_Store
</code></pre></div></div>

<p>For Hugo, you want to ignore these files and folders. The <code class="language-plaintext highlighter-rouge">static</code> folder could be named <code class="language-plaintext highlighter-rouge">public</code>, depending on your configuration.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static
public # depends on configuration
.DS_Store
</code></pre></div></div>

<h2 id="additional-resources">Additional resources</h2>
<p><a href="https://help.github.com/articles/git-and-github-learning-resources/">Learning Git and GitHub resources on help.github.com</a>
<a href="https://guides.github.com/">GitHub Guides</a>
<a href="https://git-scm.com/book/en/v2">Pro Git</a></p>
:ET