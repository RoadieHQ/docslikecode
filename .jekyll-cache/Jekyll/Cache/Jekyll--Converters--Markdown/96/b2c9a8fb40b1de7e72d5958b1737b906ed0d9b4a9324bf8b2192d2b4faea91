I"Œ2<h1 id="use-case-part-iii-balsamiq">Use Case Part III: Balsamiq</h1>

<p>After sorting through two <a href="https://docslikecode.com/articles/balsamiq-case-study-part-1/">other</a> <a href="https://docslikecode.com/articles/balsamiq-case-study-part-2/">challenges</a> with moving to their current static docs site generator, Leon Barnard at Balsamiq tackles ongoing maintenance of list pages where the lists should be appealing to click and use.</p>

<p>Check out the prior two parts of this series, including <a href="https://docslikecode.com/articles/balsamiq-case-study-part-1/">how to use conditional text with Markdown to document multiple product releases</a>, and <a href="https://docslikecode.com/articles/balsamiq-case-study-part-2/">simplify source files while providing animated gif files that include a play and pause action</a>.</p>

<h2 id="challenge-3-giving-the-list-pages-a-makeover">Challenge #3: Giving the list pages a makeover</h2>

<p>The last challenge is one that I had wanted to do for the first release of our new docs site, but never got around to. The challenge is that it‚Äôs hard to make a documentation site look pretty beyond the home page, whether it‚Äôs a static site or not.</p>

<p>Let‚Äôs look at the <a href="https://www.dropbox.com/help">Dropbox help site home page</a> as an example:</p>

<p><img src="https://media.balsamiq.com/images/docslikecode/dropbox-help.png" alt="Dropbox help example" /></p>

<p>I love the illustrations and layout. Very appealing and inviting. But as soon as you go a level deeper you get this:</p>

<p><img src="https://media.balsamiq.com/images/docslikecode/dropbox-help-toc.png" alt="Dropbox Table of Contents" /></p>

<p>A big ol‚Äô list of links. A wall of text. It‚Äôs a very different feel from the page you came from.</p>

<p>It‚Äôs clear to me that this page is automatically generated by some kind of content management system (CMS) template. Designers for pages like this usually cede control of the placement of the articles to the CMS, because they don‚Äôt want to have to manually update it every time a new article is added.</p>

<p>They‚Äôre limited because they don‚Äôt know how many articles there will be in each category, so most sites just end up creating a simple list, perhaps in sub-categories. Even awesome documentation sites like <a href="http://kb.mailchimp.com/">Mailchimp</a> and <a href="https://zapier.com/help/">Zapier</a> do this once you go beyond the first level.</p>

<p>And this is exactly what we do on our documentation site within each product category currently:</p>

<p><img src="https://www.docslikecode.com/images/balsamiq/desktop-toc-old.png" alt="Previous Balsamiq Table of Contents" /></p>

<p>But I really love the look of hard-coded landing pages like the Dropbox site. The illustrations, the grid layout, the way it directs you to the information that‚Äôs most important. I wanted to see if we could make our second-level pages look more like that.</p>

<p>To cut to the chase, here‚Äôs what the upcoming version of our docs site will look like:</p>

<p><img src="https://www.docslikecode.com/images/balsamiq/desktop-toc.png" alt="New Balsamiq Table of Contents" /></p>

<p>It feels more like a documentation site landing page, right? It has a featured articles section with the articles that are most relevant to new users, and the rest of the articles are split evenly in three columns. Yet none of it is hard-coded, even the featured ‚ÄúGetting Started‚Äù articles.</p>

<p>I‚Äôll start by explaining the ‚ÄúEverything Else‚Ä¶‚Äù section at the bottom and what makes it different from our previous version.</p>

<p>The links there are automatically placed by Hugo and styled using the <a href="http://getbootstrap.com/components/#list-group">Bootstrap List group</a> component. That part is pretty easy. The challenge was putting them in columns and making sure that the columns were equal heights, regardless of how many articles there were.</p>

<p>Here‚Äôs the code I wrote inside the Hugo template to define some variables to use further down in the code:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{{</span> <span class="err">$</span><span class="n">featuredRows</span> <span class="o">:=</span> <span class="m">1</span> <span class="p">}}</span> <span class="c">// number of rows to feature in Getting Started section</span>
<span class="p">{{</span> <span class="err">$</span><span class="n">totalCount</span> <span class="o">:=</span> <span class="nb">len</span> <span class="p">(</span><span class="n">where</span> <span class="o">.</span><span class="n">Site</span><span class="o">.</span><span class="n">Pages</span> <span class="s">"Section"</span> <span class="s">"desktop"</span><span class="p">)</span> <span class="p">}}</span> <span class="c">// total number of articles in this section</span>
<span class="p">{{</span> <span class="err">$</span><span class="n">rowCount</span> <span class="o">:=</span> <span class="p">(</span><span class="n">sub</span> <span class="p">(</span><span class="n">div</span> <span class="p">(</span><span class="n">add</span> <span class="p">(</span><span class="n">add</span> <span class="err">$</span><span class="n">totalCount</span> <span class="m">1</span><span class="p">)</span> <span class="p">(</span><span class="n">mod</span> <span class="err">$</span><span class="n">totalCount</span> <span class="m">3</span><span class="p">))</span> <span class="m">3</span><span class="p">)</span> <span class="err">$</span><span class="n">featuredRows</span><span class="p">)</span> <span class="p">}}</span> <span class="c">// number of rows in each column</span>
</code></pre></div></div>

<p>And when it comes time to populate the columns:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row mt1"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-12 col-md-4"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"list-group"</span><span class="nt">&gt;</span>
      {{ range first $rowCount (after 3 .Data.Pages.ByWeight) }}
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ .Permalink }}"</span> <span class="na">class=</span><span class="s">"list-group-item"</span><span class="nt">&gt;</span>{{ .Title }}<span class="nt">&lt;/a&gt;</span>
      {{ end }}
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-12 col-md-4"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"list-group"</span><span class="nt">&gt;</span>
      {{ range first $rowCount (after (add $rowCount 3) .Data.Pages.ByWeight) }}
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ .Permalink }}"</span> <span class="na">class=</span><span class="s">"list-group-item"</span><span class="nt">&gt;</span>{{ .Title }}<span class="nt">&lt;/a&gt;</span>
      {{ end }}
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-12 col-md-4"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"list-group"</span><span class="nt">&gt;</span>
      {{ range first $rowCount (after (add (mul $rowCount 2) 3) .Data.Pages.ByWeight) }}
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ .Permalink }}"</span> <span class="na">class=</span><span class="s">"list-group-item"</span><span class="nt">&gt;</span>{{ .Title }}<span class="nt">&lt;/a&gt;</span>
      {{ end }}
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>The variable called <code class="language-plaintext highlighter-rouge">$featuredRows</code> helps determine where the count should start for columns. From there Hugo counts the number of remaining articles and divides that number by 3 (rounded up to the nearest whole number). It then creates the number of items in each column so that they are as even as possible. It takes a bit of math to do it, but that‚Äôs what computers are good at anyway.</p>

<p>And now to that ‚ÄúGetting Started‚Äù section at the top‚Ä¶</p>

<p><img src="https://www.docslikecode.com/images/balsamiq/desktop-toc-getting-started.png" alt="Getting Started Section" /></p>

<p>I wanted different images for each of the featured articles, but I just didn‚Äôt like the idea of hard-coding any links or resources, in case we decided to change things later (and also because I‚Äôm stubborn). So, the top part of the code identifies the first three articles (ordered by weight), lists their names, links them up, and then grabs an image for each of them using the following code:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"http://media.balsamiq.com/img/support/docs/m4d/b3/toc-button-{{ .File.BaseFileName }}.svg"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>The trick is that the last part of the image file name is the same as the name of the markdown file. So, the article called <code class="language-plaintext highlighter-rouge">intro.md</code> uses an image called <code class="language-plaintext highlighter-rouge">toc-button-intro.svg</code>. This means that if we want other articles to show up in the ‚ÄúGetting Started‚Äù section we don‚Äôt need to touch this page. We just adjust the weights in the front matter and add a new image that corresponds to the file that will get moved into that area.</p>

<p>Voila!</p>

<h2 id="the-moral-of-the-story">The moral of the story</h2>

<p>So, what did we learn from these challenges? I think the most important thing is that all of them were overcome without making life harder for the content writers. We didn‚Äôt compromise on keeping the workflow simple when we added functionality, even though we were tempted to.</p>

<p>We <em>could</em> have switched away from Markdown. We <em>could</em> have started writing HTML inside our Markdown files. We <em>could</em> have required manual template updates when we reordered articles. It took a lot of work not to do these things. But that‚Äôs the beauty of programming: it‚Äôs an up front investment that saves time and effort in the long run.</p>

<p>Static sites may seem to have more limitations than traditional CMSs or powerful technical writing tools. But if you can find a way around the limitations, you can reap the benefits that made static sites attractive in the first place. Markdown is easy. GitHub offers collaborative coding. A scripted robot can run a build command from a terminal. It‚Äôs writing excellent documentation that is tough. Fortunately, that‚Äôs what technical writers are good at. Having a developer liaison for the docs team can free writers from having to think about the limitations of the technology they‚Äôre using so they can focus on writing the docs.</p>

<!-- Begin MailChimp Signup Form -->
<link href="//cdn-images.mailchimp.com/embedcode/slim-10_7.css" rel="stylesheet" type="text/css" />

<style type="text/css">
/* 	#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }
	Add your own MailChimp form style overrides in your site stylesheet or in this style block.
	   We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
</style>

<blockquote>
<div id="mc_embed_signup">
<form action="//justwriteclick.us1.list-manage.com/subscribe/post?u=3828f8d87d82289b96ff8fd19&amp;id=cc1d483d59" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate="">
    <div id="mc_embed_signup_scroll">
			<i class="fa fa-envelope-square"></i>
	<label for="mce-EMAIL">Enter your email for free lessons plus a review checklist in a neat PDF file.</label>

	<input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required="" />
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_3828f8d87d82289b96ff8fd19_cc1d483d59" tabindex="-1" value="" /></div>
    <div class="clear"><input type="submit" value="Join now" name="subscribe" id="mc-embedded-subscribe" class="btn btn--inverse" /></div>
    </div>
</form>
</div>
</blockquote>
<!--End mc_embed_signup-->

:ET